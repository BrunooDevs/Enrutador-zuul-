
spring.application.name=servicio-zuul-server

#server.port=8090 es el que se utiliza por defecto para los API Gateway (podemos utilizar cualquiera)
server.port=8090

#eureka.client.service-url.defaultZone=http://localhost:8761/eureka: indicamos cual es nuestro servidor de eureka, esta opcion es opcional pero siempre y cuando el servidor
#este en el mismo servidor de los clientes , pero si estan en maquinas distintas con ip detintas
# es obligatorioa indicar la ubicacion donde se encuentra la direccion de eureka (la direccion fisica)
#servicio-eureka-server seria nuestro nombre de nuestro contenedor en docker , pero si estamos en producion es localhost
eureka.client.service-url.defaultZone=http://servicio-eureka-server:8761/eureka/

#configuramos nuestras rutas dinamicas de cada microservicio, cada ruta que le demos tiene que ir asociado
#al nombre del servicio

#zuul.routes. le damos el nombre de la ruta de nuestro microservicio tiene que ser relacionado al microservicio
#service-id= colocamos el nombre de nuestro microservicio
zuul.routes.productos.service-id=servicio-productos

#le damos una ruta base a nuestro microservico, cada vez que queramos acceder al microserviciio servicio-productos
#atraves de zuul tenemos que colocar esta ruta base , y despues de lo que venga de esta ruta base serian las
#rutas propias de ese microservicio
# ** significa que todo lo que venga despues de esta ruta base de /api/productos son las rutas propias del microservicio
zuul.routes.productos.path=/api/productos/**



#CONFIGURACION MICROSERVICIO ITEMS

#zuul.routes. le damos el nombre de la ruta de nuestro microservicio tiene que ser relacionado al microservicio
#service-id= colocamos el nombre de nuestro microservicio
zuul.routes.items.service-id=servicio-items

#le damos una ruta base a nuestro microservico, cada vez que queramos acceder al microserviciio servicio-productos
#atraves de zuul tenemos que colocar esta ruta base , y despues de lo que venga de esta ruta base serian las
#rutas propias de ese microservicio
# ** significa que todo lo que venga despues de esta ruta base de /api/productos son las rutas propias del microservicio
zuul.routes.items.path=/api/items/**

zuul.routes.servicio-usuarios.service-id=servicio-usuarios
zuul.routes.servicio-usuarios.path=/api/usuarios/**

#NOTA: de presenrencia poner de zuul.routes el nombre del microservicio
zuul.routes.servicio-oauth.service-id=servicio-oauth
zuul.routes.servicio-oauth.path=/api/security/**

#excluimos de la cabecera http lsa cookies es una configuracion que requiere zull para que funcione la
#autenticacion
zuul.routes.servicio-oauth.sensitive-headers=Cookie,Set-Cookie


#con este codigo se maneja el timeout(se debe manejar el timeout en cada microservicio por separado)
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds:120000
ribbon.ConnectTimeout:9000
ribbon.ReadTimeout:30000



#por defecto zipkin envia las trasas a un 10% de los request (0,1 es igual al 10%) cambiamos para que envia las trasas simpre
#ponemos spring.sleuth.sampler.probability=1.0 (1.0 indica que enviaremos las trasas al 100%)
spring.sleuth.sampler.probability=1.0

#configuramos la ruta el endpoint del servidor de zipkin, esta configuracion es opcional ya que por defecto va a buscar
#en la ruta localhots:9411, pero si esta en otro servidor a en un puerto distinto lo tenemos que indicar en
#spring.zipkin.base-url=http:url:puerto
spring.zipkin.base-url=http://localhost:9411/
spring.zipkin.sender.type=rabbit

spring.rabbitmq.host=localhost

#NOTA2: SI ESTAMOS DE FORMA LOCAL SE REQUIERE LAS SIGUIENTES CONFIGURAACIONES spring.rabbitmq.port=5672, 
#spring.rabbitmq.username=guest, spring.rabbitmq.password=guest, PERO SI ESTAMOS UTILIZANDO DOCKER ESTAS TRES OPCIONES 
#SE OMITEN
 
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest



